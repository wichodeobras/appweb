from django.db import models

class IR(models.Model):
    designacion_mm = models.CharField(max_length=50)
    designacion_pulg = models.CharField(max_length=50)
    d = models.FloatField()
    h = models.FloatField()
    tw = models.FloatField()
    bf = models.FloatField()
    tf = models.FloatField()
    peso = models.FloatField()
    area = models.FloatField()
    ix = models.FloatField()
    zx = models.FloatField()
    sx = models.FloatField()
    rx = models.FloatField()
    iy = models.FloatField()
    zy = models.FloatField()
    sy = models.FloatField()
    ry = models.FloatField()
    j = models.FloatField()
    cw = models.FloatField()

class HP(models.Model):
    designacion_mm = models.CharField(max_length=50)
    designacion_pulg = models.CharField(max_length=50)
    d = models.FloatField()
    T = models.FloatField()
    tw = models.FloatField()
    bf = models.FloatField()
    tf = models.FloatField()
    k = models.FloatField()
    k1 = models.FloatField()
    peso = models.FloatField()
    area = models.FloatField()
    b2ft = models.FloatField()
    htw = models.FloatField()
    ix = models.FloatField()
    zx = models.FloatField()
    sx = models.FloatField()
    rx = models.FloatField()
    iy = models.FloatField()
    zy = models.FloatField()
    sy = models.FloatField()
    ry = models.FloatField()
    j = models.FloatField()
    cw = models.FloatField()

class CE(models.Model):
    
    designacion_mm = models.CharField(max_length=50)
    designacion_pulg = models.CharField(max_length=50)
    d = models.FloatField(help_text="Peralte (mm)")
    h = models.FloatField(help_text="Altura del alma (mm)")
    tw = models.FloatField(help_text="Espesor del alma (mm)")
    bf = models.FloatField(help_text="Ancho del patín (mm)")
    tf = models.FloatField(help_text="Espesor del patín (mm)")
    k = models.FloatField(help_text="Distancia k (mm)")
    T = models.FloatField(help_text="Altura total del alma T (mm)")
    x_barra = models.FloatField(help_text="Centroide x̄ (mm)")
    eo_cortante = models.FloatField(help_text="Excentricidad al centro cortante eₒ (mm)")
    g = models.FloatField(help_text="Gramíl g (mm)")
    g1 = models.FloatField(help_text="Gramíl g₁ (mm)")
    sujetadores = models.CharField(max_length=20, help_text="Diámetro de sujetadores (pulg.)")
    area = models.FloatField(help_text="Área de la sección (cm²)")
    peso = models.FloatField(help_text="Peso (kg/m)")
    ix = models.FloatField(help_text="Inercia Ixx (cm⁴)")
    zx = models.FloatField(help_text="Módulo plástico Zxx (cm³)")
    sx = models.FloatField(help_text="Módulo elástico Sxx (cm³)")
    rx = models.FloatField(help_text="Radio de giro rxx (cm)")
    iy = models.FloatField(help_text="Inercia Iyy (cm⁴)")
    zy = models.FloatField(help_text="Módulo plástico Zyy (cm³)")
    sy = models.FloatField(help_text="Módulo elástico Syy (cm³)")
    ry = models.FloatField(help_text="Radio de giro ryy (cm)")
    j = models.FloatField(help_text="Módulo de torsión J (cm⁴)")
    cw = models.FloatField(help_text="Constante de alabeo Cw (cm⁶)")
    ro = models.FloatField(help_text="Radio polar rₒ (cm)")
    h_torsion = models.FloatField(help_text="Constante H (adimensional)")

class CF(models.Model):

    designacion_mm = models.CharField(max_length=100)
    designacion_pulg = models.CharField(max_length=100)
    calibre = models.CharField(max_length=10)
    peso_aprox = models.FloatField(help_text="Peso aproximado (kg/m)")
    h_o = models.FloatField(help_text="Altura hₒ (mm)")
    b_o = models.FloatField(help_text="Ancho bₒ (mm)")
    c = models.FloatField(help_text="Labio c (mm)")
    t = models.FloatField(help_text="Espesor t (mm)")
    R = models.FloatField(help_text="Radio de doblado R (mm)")
    area_total = models.FloatField(help_text="Área total A (cm²)")
    # Propiedades para Fy = 50 ksi
    ae_50 = models.FloatField(help_text="Área efectiva Ae (Fy=50 ksi)")
    idx_50 = models.FloatField(help_text="Inercia X-X (Fy=50 ksi)")
    sxe_50 = models.FloatField(help_text="Sxe (Fy=50 ksi)")
    mnxo_50 = models.FloatField(help_text="Mnxo (Fy=50 ksi)")
    # Propiedades para Fy = 33 ksi
    ae_33 = models.FloatField(help_text="Área efectiva Ae (Fy=33 ksi)")
    idx_33 = models.FloatField(help_text="Inercia X-X (Fy=33 ksi)")
    sxe_33 = models.FloatField(help_text="Sxe (Fy=33 ksi)")
    mnxo_33 = models.FloatField(help_text="Mnxo (Fy=33 ksi)")
    rx = models.FloatField(help_text="Radio de giro rx (Fy=33 ksi)")
    # Eje Y-Y
    iy = models.FloatField(help_text="Iy (cm⁴)")
    sy = models.FloatField(help_text="Sy (cm³)")
    ry = models.FloatField(help_text="ry (cm)")
    # Torsión y centroides
    j = models.FloatField(help_text="Módulo de torsión J (cm⁴)")
    cw = models.FloatField(help_text="Constante de alabeo Cw (cm⁶)")
    x_barra = models.FloatField(help_text="x̄ (cm)")
    x_c = models.FloatField(help_text="xc (cm)")
    e_o = models.FloatField(help_text="eₒ (cm)")

    def __str__(self):
        return f"{self.designacion_mm} / {self.designacion_pulg}"

    def __str__(self):
        return f"{self.designacion_mm} / {self.designacion_pulg}"
